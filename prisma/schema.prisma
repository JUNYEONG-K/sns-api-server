// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  nickname  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  feeds      Feeds[]
  followedBy Follows[]  @relation("followerRelation")
  following  Follows[]  @relation("followeeRelation")
  comments   Comments[]

  @@map("users")
}

model Follows {
  followeeId Int      @map("followee_id")
  followerId Int      @map("follower_id")
  createdAt  DateTime @default(now()) @map("created_at")

  followee Users @relation("followeeRelation", fields: [followeeId], references: [id])
  follower Users @relation("followerRelation", fields: [followerId], references: [id])

  @@id([followeeId, followerId])
  @@map("follows")
}

model Feeds {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  textContents String   @map("text_contents")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user     Users      @relation(fields: [userId], references: [id])
  Comments Comments[]

  @@map("feeds")
}

model Comments {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  feedId       Int      @map("feed_id")
  textContents String   @map("text_contents")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user Users @relation(fields: [userId], references: [id])
  feed Feeds @relation(fields: [feedId], references: [id])

  @@map("comments")
}

model MediaContents {
  id       Int         @id @default(autoincrement())
  name     String
  type     MediaType
  mimeType String      @map("mime_type")
  status   MediaStatus @default(PENDING)

  @@map("media_contents")
}

enum MediaType {
  IMAGE
  VIDEO
}

enum MediaStatus {
  PENDING
  COMPLETED
  DELETED
}
